#ifndef _INT_LOG_H
#   define _INT_LOG_H

#include "../core/base.h"

#define log2_floor(x) (lbsm1 ^ __builtin_clzl((x) | 1))
#define log2_ceil(x) (lbs - __builtin_clzl((x) | 1))
#define log2_true(x) __builtin_ctzl(x)
// table[i] = ceil(log10(2^i)) << 32 - 10^ceil(log10(2^i))
inline char log10_floor32(unsigned long x) {
    static const unsigned long table[] = {
        0x0,         0xfffffff6,  0xfffffff6,  0xfffffff6,
        0x1ffffff9c, 0x1ffffff9c, 0x1ffffff9c, 0x2fffffc18,
        0x2fffffc18, 0x2fffffc18, 0x3ffffd8f0, 0x3ffffd8f0,
        0x3ffffd8f0, 0x3ffffd8f0, 0x4fffe7960, 0x4fffe7960,
        0x4fffe7960, 0x5fff0bdc0, 0x5fff0bdc0, 0x5fff0bdc0,
        0x6ff676980, 0x6ff676980, 0x6ff676980, 0x6ff676980,
        0x7fa0a1f00, 0x7fa0a1f00, 0x7fa0a1f00, 0x8c4653600,
        0x8c4653600, 0x8c4653600, 0x900000000, 0x900000000
    };
    return (x + table[log2_floor(x)]) >> 32;
}
#define log10_ceil32(x) (log10_floor32(x) + 1)
// log2 => log10
inline char log10_floor64(unsigned long x) {
    static const char table1[] = {
        0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1,  0x2,  0x2,  0x2,  0x3,  0x3,  0x3,  0x3,  0x4,  0x4,
        0x4, 0x5, 0x5, 0x5, 0x6, 0x6, 0x6,  0x6,  0x7,  0x7,  0x7,  0x8,  0x8,  0x8,  0x9,  0x9,
        0x9, 0x9, 0xa, 0xa, 0xa, 0xb, 0xb,  0xb,  0xc,  0xc,  0xc,  0xc,  0xd,  0xd,  0xd,  0xe,
        0xe, 0xe, 0xf, 0xf, 0xf, 0xf, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12
    };
    static const long table2[] = {
        0x9,                0x9,                0x9,                0x9,
        0x63,               0x63,               0x63,               0x3e7,
        0x3e7,              0x3e7,              0x270f,             0x270f,
        0x270f,             0x270f,             0x1869f,            0x1869f,
        0x1869f,            0xf423f,            0xf423f,            0xf423f,
        0x98967f,           0x98967f,           0x98967f,           0x98967f,
        0x5f5e0ff,          0x5f5e0ff,          0x5f5e0ff,          0x3b9ac9ff,
        0x3b9ac9ff,         0x3b9ac9ff,         0x2540be3ff,        0x2540be3ff,
        0x2540be3ff,        0x2540be3ff,        0x174876e7ff,       0x174876e7ff,
        0x174876e7ff,       0xe8d4a50fff,       0xe8d4a50fff,       0xe8d4a50fff,
        0x9184e729fff,      0x9184e729fff,      0x9184e729fff,      0x9184e729fff,
        0x5af3107a3fff,     0x5af3107a3fff,     0x5af3107a3fff,     0x38d7ea4c67fff,
        0x38d7ea4c67fff,    0x38d7ea4c67fff,    0x2386f26fc0ffff,   0x2386f26fc0ffff,
        0x2386f26fc0ffff,   0x2386f26fc0ffff,   0x16345785d89ffff,  0x16345785d89ffff,
        0x16345785d89ffff,  0xde0b6b3a763ffff,  0xde0b6b3a763ffff,  0xde0b6b3a763ffff,
        0x8ac7230489e7ffff, 0x8ac7230489e7ffff, 0x8ac7230489e7ffff, 0x8ac7230489e7ffff
    };
    return table1[log2_floor(x)] + sml(table2[log2_floor(x)], x);
}
#define log10_ceil64(x) (log10_floor64(x) + 1)

#endif
